import os
import sys
import subprocess
import glob
from typing import Dict


def get_fmod_paths(env: Dict) -> Dict:
    fmod_api = env["fmod_api"]

    fmod_api_core_headers_path = fmod_api + "/api/core/inc/"
    fmod_api_studio_headers_path = fmod_api + "/api/studio/inc/"

    if env["platform"] == "windows":
        fmod_api_core_libs_path = fmod_api + "/api/core/lib/x64/"
        fmod_api_studio_libs_path = fmod_api + "/api/studio/lib/x64/"
        fmodL_library = "fmodL_vc"
        fmod_library = "fmod_vc"
        fmodstudio_library = "fmodstudio_vc"
        fmodstudioL_library = "fmodstudioL_vc"
    elif env["platform"] == "osx":
        fmod_api_core_libs_path = fmod_api + "/api/core/lib/"
        fmod_api_studio_libs_path = fmod_api + "/api/studio/lib/"
        fmodL_library = "libfmodL"
        fmod_library = "libfmod"
        fmodstudio_library = "libfmodstudio"
        fmodstudioL_library = "libfmodstudioL"
    elif env["platform"] == "x11" or env["platform"] == "server":
        fmod_api_core_libs_path = fmod_api + "/api/core/lib/x86_64/"
        fmod_api_studio_libs_path = fmod_api + "/api/studio/lib/x86_64/"
        fmodL_library = "libfmodL"
        fmod_library = "libfmod"
        fmodstudio_library = "libfmodstudio"
        fmodstudioL_library = "libfmodstudioL"
    elif env["platform"] == "android":
        fmod_api_core_libs_path = fmod_api + "/api/core/lib/arm64-v8a/"
        fmod_api_studio_libs_path = fmod_api + "/api/studio/lib/arm64-v8a/"
        fmodL_library = "libfmodL"
        fmod_library = "libfmod"
        fmodstudio_library = "libfmodstudio"
        fmodstudioL_library = "libfmodstudioL"
    elif env["platform"] == "ios":
        fmod_api_core_libs_path = fmod_api + "/api/core/lib/"
        fmod_api_studio_libs_path = fmod_api + "/api/studio/lib/"
        fmodL_library = "libfmodL_iphoneos"
        fmod_library = "libfmod_iphoneos"
        fmodstudio_library = "libfmodstudio_iphoneos"
        fmodstudioL_library = "libfmodstudioL_iphoneos"

    return {
        "fmod_api_core_headers_path": fmod_api_core_headers_path,
        "fmod_api_studio_headers_path": fmod_api_studio_headers_path,
        "fmod_api_core_libs_path": fmod_api_core_libs_path,
        "fmod_api_studio_libs_path": fmod_api_studio_libs_path,
        "fmodL_library": fmodL_library,
        "fmod_library": fmod_library,
        "fmodstudio_library": fmodstudio_library,
        "fmodstudioL_library": fmodstudioL_library,
    }

Import('env')
Import('env_modules')

opts = Variables([], ARGUMENTS)

opts.Add(PathVariable("fmod_api", "The FMOD API path", "", PathVariable.PathAccept))
opts.Update(env)

fmod_paths = get_fmod_paths(env)
fmod_api_core_headers_path = fmod_paths["fmod_api_core_headers_path"]
fmod_api_studio_headers_path = fmod_paths["fmod_api_studio_headers_path"]
fmod_api_core_libs_path = fmod_paths["fmod_api_core_libs_path"]
fmod_api_studio_libs_path = fmod_paths["fmod_api_studio_libs_path"]
fmodL_library = fmod_paths["fmodL_library"]
fmod_library = fmod_paths["fmod_library"]
fmodstudio_library = fmod_paths["fmodstudio_library"]
fmodstudioL_library = fmod_paths["fmodstudioL_library"]

env["target_path"] = env.Dir("#bin").__str__() + "/"

if env["target"] == "debug":
    env.Append(CPPDEFINES=["FMOD_DEBUG"])
    env_modules.Append(CPPDEFINES=["FMOD_DEBUG"])

if env["platform"] == "windows":
    #env.Append(LINKFLAGS=["/WX"])

    env_modules.Append(CPPDEFINES=["FMOD_WIN"])
    env.Append(CPPDEFINES=["FMOD_WIN"])

elif env["platform"] == "osx":
    macos_install_name = "@rpath/libfmod.{}.{}.framework/libfmod.{}.{}".format(
        env["platform"], env["target"], env["platform"], env["target"]
    )

    env.Append(
        LINKFLAGS=[
            "-framework",
            "Cocoa",
            "-Wl,-undefined,dynamic_lookup",
            "-Wl,-rpath,@loader_path",
            "-Wl,-install_name,{}".format(macos_install_name),
        ]
    )

    env.Append(CPPDEFINES=["FMOD_OSX"])
    env_modules.Append(CPPDEFINES=["FMOD_OSX"])

elif env["platform"] == "x11" or env["platform"] == "server":
    env.Append(CCFLAGS=["-fPIC", "-Wwrite-strings"])
    env.Append(LINKFLAGS=["-Wl,-R,'$$ORIGIN'"])
    env.Append(LINKFLAGS=["-m64", "-fuse-ld=gold"])

    env.Append(CPPDEFINES=["FMOD_LINUX"])
    env_modules.Append(CPPDEFINES=["FMOD_LINUX"])

env_modules.Prepend(CPPPATH=[fmod_api_core_headers_path, fmod_api_studio_headers_path, os.getcwd()])
env.Prepend(LIBPATH=[fmod_api_studio_libs_path, fmod_api_core_libs_path])

if env["target"] == "debug":
    if env["platform"] == "windows":
        if env.msvc:
            env.Prepend(LIBS=[File(os.path.join(fmod_api_core_libs_path, fmodL_library + ".lib")), File(os.path.join(fmod_api_studio_libs_path, fmodstudioL_library + ".lib"))])
        else:
            env.Prepend(LIBS=[File(os.path.join(fmod_api_core_libs_path, "fmodL.dll")), File(os.path.join(fmod_api_studio_libs_path, "fmodstudioL.dll"))])
    else:
        env.Prepend(LIBS=[fmodL_library, fmodstudioL_library])
else:
    if env["platform"] == "windows":
        if env.msvc:
            env.Prepend(LIBS=[File(os.path.join(fmod_api_core_libs_path, fmod_library + ".lib")), File(os.path.join(fmod_api_studio_libs_path, fmodstudio_library + ".lib"))])
        else:
            env.Prepend(LIBS=[File(os.path.join(fmod_api_core_libs_path, "fmod.dll")), File(os.path.join(fmod_api_studio_libs_path, "fmodstudio.dll"))])
    else:
        env.Prepend(LIBS=[fmod_library, fmodstudio_library])

if env["platform"] == "windows":
    def copy_libs(target, source, env, executor=None):
        Execute(
            Mkdir(env["target_path"])
        )
        if env["target"] == "debug":
            Execute(
                Copy(
                    env["target_path"] + "fmodL.dll",
                    fmod_api_core_libs_path + "fmodL.dll",
                )
            )
            Execute(
                Copy(
                    env["target_path"] + "fmodstudioL.dll",
                    fmod_api_studio_libs_path + "fmodstudioL.dll",
                )
            )
        else:
            Execute(
                Copy(
                    env["target_path"] + "fmod.dll",
                    fmod_api_core_libs_path + "fmod.dll",
                )
            )
            Execute(
                Copy(
                    env["target_path"] + "fmodstudio.dll",
                    fmod_api_studio_libs_path + "fmodstudio.dll",
                )
            )
        return 0

    copy_libs("", "", env)

if env["platform"] == "osx":
    def copy_libs(self, arg, env, executor=None):
        Execute(
            Mkdir(env["target_path"])
        )
        if env["target"] == "debug":
            Execute(
                Copy(
                    env["target_path"]
                    + "libfmod.{}.{}.framework/{}".format(
                        env["platform"], env["target"], "libfmodL.dylib"
                    ),
                    fmod_api_core_libs_path + "libfmodL.dylib",
                )
            )
            Execute(
                Copy(
                    env["target_path"]
                    + "libfmod.{}.{}.framework/{}".format(
                        env["platform"], env["target"], "libfmodstudioL.dylib"
                    ),
                    fmod_api_studio_libs_path + "libfmodstudioL.dylib",
                )
            )
        else:
            Execute(
                Copy(
                    env["target_path"]
                    + "libfmod.{}.{}.framework/{}".format(
                        env["platform"], env["target"], "libfmod.dylib"
                    ),
                    fmod_api_core_libs_path + "libfmod.dylib",
                )
            )
            Execute(
                Copy(
                    env["target_path"]
                    + "libfmod.{}.{}.framework/{}".format(
                        env["platform"], env["target"], "libfmodstudio.dylib"
                    ),
                    fmod_api_studio_libs_path + "libfmodstudio.dylib",
                )
            )

    copy_libs("", "", env)

if env["platform"] == "x11" or env["platform"] == "server":
    import shutil

    def copy_libs(self, arg, env, executor=None):
        Execute(
            Mkdir(env["target_path"])
        )
        print("copy libs")
        dst_dir = env["target_path"]
        core_src_dir = fmod_api_core_libs_path
        studio_src_dir = fmod_api_studio_libs_path
        if env["target"] == "debug":
            for filename in os.listdir(core_src_dir):
                if filename.startswith("libfmodL"):
                    src_file = os.path.join(core_src_dir, filename)
                    dst_file = os.path.join(dst_dir, filename)
                    shutil.copy2(src_file, dst_file)
            for filename in os.listdir(studio_src_dir):
                if filename.startswith("libfmodstudioL"):
                    src_file = os.path.join(studio_src_dir, filename)
                    dst_file = os.path.join(dst_dir, filename)
                    shutil.copy2(src_file, dst_file)
        else:
            for filename in os.listdir(core_src_dir):
                if filename.startswith("libfmod") and not filename.startswith("libfmodL"):
                    src_file = os.path.join(core_src_dir, filename)
                    dst_file = os.path.join(dst_dir, filename)
                    shutil.copy2(src_file, dst_file)
            for filename in os.listdir(studio_src_dir):
                if filename.startswith("libfmodstudio") and not filename.startswith("libfmodstudioL"):
                    src_file = os.path.join(studio_src_dir, filename)
                    dst_file = os.path.join(dst_dir, filename)
                    shutil.copy2(src_file, dst_file)

    copy_libs("", "", env)

env_modules.add_source_files(env.modules_sources, "*.cpp")
env_modules.add_source_files(env.modules_sources, "**/*.cpp")